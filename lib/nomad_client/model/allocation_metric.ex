# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule NomadClient.Model.AllocationMetric do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :AllocationTime,
    :ClassExhausted,
    :ClassFiltered,
    :CoalescedFailures,
    :ConstraintFiltered,
    :DimensionExhausted,
    :NodesAvailable,
    :NodesEvaluated,
    :NodesExhausted,
    :NodesFiltered,
    :QuotaExhausted,
    :ResourcesExhausted,
    :ScoreMetaData,
    :Scores
  ]

  @type t :: %__MODULE__{
          :AllocationTime => integer() | nil,
          :ClassExhausted => %{optional(String.t()) => integer()} | nil,
          :ClassFiltered => %{optional(String.t()) => integer()} | nil,
          :CoalescedFailures => integer() | nil,
          :ConstraintFiltered => %{optional(String.t()) => integer()} | nil,
          :DimensionExhausted => %{optional(String.t()) => integer()} | nil,
          :NodesAvailable => %{optional(String.t()) => integer()} | nil,
          :NodesEvaluated => integer() | nil,
          :NodesExhausted => integer() | nil,
          :NodesFiltered => integer() | nil,
          :QuotaExhausted => [String.t()] | nil,
          :ResourcesExhausted => %{optional(String.t()) => NomadClient.Model.Resources.t()} | nil,
          :ScoreMetaData => [NomadClient.Model.NodeScoreMeta.t()] | nil,
          :Scores => %{optional(String.t()) => float()} | nil
        }
end

defimpl Poison.Decoder, for: NomadClient.Model.AllocationMetric do
  import NomadClient.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:ResourcesExhausted, :map, NomadClient.Model.Resources, options)
    |> deserialize(:ScoreMetaData, :list, NomadClient.Model.NodeScoreMeta, options)
  end
end
