# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Api.System do
  @moduledoc """
  API calls for all endpoints tagged `System`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder


  @doc """
  initializes a garbage collection of jobs, evaluations, allocations, and nodes. This is an asynchronous operation

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec force_gc(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def force_gc(connection, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/system/gc")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end

  @doc """
  reconciles the summaries of all registered jobs

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reconcile_summary(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def reconcile_summary(connection, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/system/reconcile/summaries")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end
end
