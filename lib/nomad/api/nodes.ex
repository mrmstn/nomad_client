# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Nomad.Api.Nodes do
  @moduledoc """
  API calls for all endpoints tagged `Nodes`.
  """

  alias Nomad.Connection
  import Nomad.RequestBuilder

  @doc """
  creates a new evaluation for the given node. This can be used to force a run of the scheduling logic

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - node_id (String.t): Specifies the ID of the node. This must be the full UUID, not the short 8-character one. This is specified as part of the path
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Nomad.Model.NodeEvalResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec evaluate_node(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Nomad.Model.NodeEvalResponse.t()} | {:error, Tesla.Env.t()}
  def evaluate_node(connection, node_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/node/#{node_id}/evaluate")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Nomad.Model.NodeEvalResponse{}}
    ])
  end

  @doc """
  lists all of the allocations for the given node
  This can be used to determine what allocations have been scheduled on the node, their current status, and the values of dynamically assigned resources, like ports

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - node_id (String.t): Specifies the ID of the node. This must be the full UUID, not the short 8-character one. This is specified as part of the path
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%AllocationListStub{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_allocations_for_node(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(Nomad.Model.AllocationListStub.t())} | {:error, Tesla.Env.t()}
  def get_allocations_for_node(connection, node_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/node/#{node_id}/allocations")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%Nomad.Model.AllocationListStub{}]}
    ])
  end

  @doc """
  queries the status of a client node

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - node_id (String.t): Specifies the ID of the node. This must be the full UUID, not the short 8-character one. This is specified as part of the path
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Nomad.Model.Node.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_node(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Nomad.Model.Node.t()} | {:error, Tesla.Env.t()}
  def get_node(connection, node_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/node/#{node_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Nomad.Model.Node{}}
    ])
  end

  @doc """
  lists all nodes registered with Nomad

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :prefix (String.t): Specifies a string to filter jobs on based on an index prefix. This is specified as a query string parameter
  ## Returns

  {:ok, [%NodeListStub{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_nodes(Tesla.Env.client(), keyword()) ::
          {:ok, list(Nomad.Model.NodeListStub.t())} | {:error, Tesla.Env.t()}
  def get_nodes(connection, opts \\ []) do
    optional_params = %{
      :prefix => :query
    }

    %{}
    |> method(:get)
    |> url("/nodes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, [%Nomad.Model.NodeListStub{}]}
    ])
  end

  @doc """
  returns matches for a given prefix and context, where a context can be jobs, allocations, evaluations, nodes, or deployments
  When using Nomad Enterprise, the allowed contexts include quotas and namespaces. Additionally, a prefix can be searched for within every context

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (SearchRequest): 
  ## Returns

  {:ok, Nomad.Model.SearchResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search(Tesla.Env.client(), keyword()) ::
          {:ok, Nomad.Model.SearchResponse.t()} | {:error, Tesla.Env.t()}
  def search(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/search")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Nomad.Model.SearchResponse{}}
    ])
  end

  @doc """
  toggles the drain mode of the node
  When draining is enabled, no further allocations will be assigned to this node, and existing allocations will be migrated to new nodes

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - node_id (String.t): Specifies the ID of the node. This must be the full UUID, not the short 8-character one. This is specified as part of the path
  - opts (KeywordList): [optional] Optional parameters
    - :body (NodeUpdateDrainRequest): 
  ## Returns

  {:ok, Nomad.Model.NodeDrainUpdateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_drain_mode_for_node(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Nomad.Model.NodeDrainUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def update_drain_mode_for_node(connection, node_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/node/#{node_id}/drain")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Nomad.Model.NodeDrainUpdateResponse{}}
    ])
  end

  @doc """
  toggles the scheduling eligibility of the node

  ## Parameters

  - connection (Nomad.Connection): Connection to server
  - node_id (String.t): Specifies the ID of the node. This must be the full UUID, not the short 8-character one. This is specified as part of the path
  - opts (KeywordList): [optional] Optional parameters
    - :body (NodeUpdateEligibilityRequest): 
  ## Returns

  {:ok, Nomad.Model.NodeEligibilityUpdateResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_node_eligibility(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Nomad.Model.NodeEligibilityUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def update_node_eligibility(connection, node_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/node/#{node_id}/eligibility")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Nomad.Model.NodeEligibilityUpdateResponse{}}
    ])
  end
end
